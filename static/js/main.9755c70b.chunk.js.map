{"version":3,"sources":["components/CreateTodo.js","components/Item.js","components/TodoList.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["CreateTodo","submitNewTask","useState","input","setInput","isError","setError","className","onSubmit","e","preventDefault","trim","htmlFor","id","type","onChange","target","value","disabled","Item","item","removeTask","changeStatus","moveUp","moveDown","moveTop","moveBottom","changeTaskTitle","showDropdown","setDropdown","toggleDropdown","aria-label","taskID","checked","complete","aria-haspopup","aria-expanded","onClick","title","TodoList","list","displaylist","map","key","SearchBar","searchValue","searchChange","placeholder","App","searchTerm","setNewSearch","initialState","JSON","parse","localStorage","getItem","setValue","useEffect","setItem","stringify","useCustomLocalStateHook","tasks","setTasks","swap","arr","idx1","idx2","searchedTask","filter","task","toLowerCase","includes","newTaskList","event","itemIndex","indexOf","length","newInput","newTask","Math","floor","random","toString","concat","Date","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9755c70b.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\nconst CreateTodo = ({submitNewTask}) => {\n    const [input, setInput] = useState('');\n    const [isError, setError] = useState(false);\n\n    const submitTask = (e) => {\n        e.preventDefault();\n        if (!input.trim()) {\n            return setError(true);\n        }\n        submitNewTask(input);\n        setInput('');\n        setError(false);\n    }\n\n    return(\n        <div className=\"mt-3\">\n            <form className=\"form-group align-items-center\" onSubmit={submitTask}>\n                <label className=\"m-1\" htmlFor=\"title\" >Add New Task </label>\n                <input \n                    className=\"form-control flex-grow-1\"\n                    id=\"title\" \n                    type=\"text\" \n                    onChange={(e) => setInput(e.target.value)}\n                    value={input}\n                />\n                {isError && (\n                    <small className=\"form-text text-danger d-block\">\n                        Please make sure that your task content letters or/and numbers\n                    </small>\n                )}         \n                <button className=\"mt-2 btn btn-primary\" type=\"submit\" disabled = {!input}>\n                    Submit\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateTodo;","import React,{useState} from 'react';\n\nconst Item = ({item, removeTask, changeStatus, moveUp, moveDown,moveTop,moveBottom,changeTaskTitle}) => {\n    const [showDropdown, setDropdown] = useState(false);\n\n    const toggleDropdown = () => {\n        setDropdown(!showDropdown);\n    }\n    \n    return (\n        <div className=\"list-group-item d-flex flex-row align-items-center\">\n            <div className=\"flex-grow-1 input-group\">\n                <div className={\"input-group-prepend \" + (showDropdown? \"show\": \"\")}>\n                    <div className=\"input-group-text\">\n                        <input className=\"\" type=\"checkbox\" aria-label=\"Checkbox for completed task\" id={item.taskID} onChange={()=> changeStatus(item)} checked={item.complete}/> \n                    </div>\n                    <button type=\"button\" className=\"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\" aria-haspopup=\"true\" aria-expanded={showDropdown} onClick={()=> toggleDropdown()}>\n                        <span className=\"sr-only\">Toggle Dropdown</span>\n                    </button>\n                    <div className={\"dropdown-menu \" + (showDropdown? \"show\": \"\")}>\n                        <button type=\"button\" className=\"dropdown-item btn btn-sm\" onClick={()=> toggleDropdown(moveUp(item))}>Up</button>\n                        <button type=\"button\" className=\"dropdown-item btn btn-sm\" onClick={()=> toggleDropdown(moveDown(item))}>Down</button>\n                        <button type=\"button\" className=\"dropdown-item btn btn-sm\" onClick={()=> toggleDropdown(moveTop(item))}>Top</button>\n                        <button type=\"button\" className=\"dropdown-item btn btn-sm\" onClick={()=> toggleDropdown(moveBottom(item))}>Bottom</button>\n                    </div>\n                </div>\n                <input \n                    className={\"text-capitalize todo-task form-control border-0 \" + (item.complete ? 'complete': '')}\n                    htmlFor={item.taskID}\n                    type=\"text\"\n                    onChange={(e)=> changeTaskTitle(e,item)}\n                    value={item.title}\n                />             \n            </div>        \n            <button type=\"button\" className=\"btn btn-danger btn-sm\" onClick={()=> removeTask(item)}>Delete</button>\n        </div>\n    )\n}\n\nexport default Item;","import React from 'react';\nimport Item from './Item';\n\nconst TodoList = ({list, removeTask, changeStatus, moveUp, moveDown,moveTop,moveBottom,changeTaskTitle}) => {\n    let displaylist = list.map((item) => {\n        return (\n            <Item \n                key = {item.taskID} \n                item = {item} \n                removeTask = {removeTask}\n                changeStatus = {changeStatus}\n                moveUp = {moveUp}\n                moveDown ={moveDown}\n                moveTop = {moveTop}\n                moveBottom = {moveBottom}\n                changeTaskTitle = {changeTaskTitle}\n            />\n        )\n    });\n\n    return(\n        <div className=\"list-group shadow-sm\">\n            {displaylist}\n        </div>\n    );\n};\n\nexport default TodoList;","import React from 'react';\n\nconst SearchBar = ({searchValue, searchChange}) => {\n    return (\n        <div className=\"form-group row\">\n            <div className=\"col-sm-12\">\n                <label className=\"sr-only\" htmlFor=\"search\" >Search for tasks</label>\n                <input \n                    className=\"form-control \"\n                    type=\"text\"\n                    id=\"search\"\n                    onChange={searchChange}\n                    value={searchValue}\n                    placeholder=\"Search for tasks\"\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default SearchBar;","import React,{useState,useEffect} from 'react';\nimport CreateTodo from './components/CreateTodo';\nimport TodoList from './components/TodoList';\nimport SearchBar from './components/SearchBar';\nimport './App.css';\n\nconst App = () => {\n  //custom hook to save the objects in local state\n  const useCustomLocalStateHook = (key,initialState) => {\n    const [value,setValue] = useState(JSON.parse(localStorage.getItem(key))||initialState);\n\n    useEffect(() => {\n      localStorage.setItem(key,JSON.stringify(value));\n    },[key,value]);\n    \n    return [value,setValue];\n  }\n\n  const [searchTerm, setNewSearch] = useState('');\n  const [tasks,setTasks] = useCustomLocalStateHook('savedTask',[]);\n\n  //this function is used to swap 2 elements in an array\n  const swap = function(arr,idx1,idx2) {\n    [arr[idx1],arr[idx2]] = [arr[idx2],arr[idx1]];\n    return arr;\n  }\n\n  const searchedTask = tasks.filter(task => \n    task.title.toLowerCase().includes(searchTerm.toLowerCase())  \n  );\n\n  const handleNewtaskSubmit = (newInput) => {\n    const randomNum = Math.floor(Math.random()*1000*7).toString();\n    let newTask = {\n      title: newInput,\n      complete: false,\n      taskID: randomNum.concat('-',Date.now())\n    };\n    const newTaskList = [...tasks, newTask];\n    setTasks(newTaskList);\n  };\n  const removeTask = item => {\n    let newTaskList = tasks.filter(task => task.taskID !== item.taskID);\n    setTasks(newTaskList);\n  };\n  //to change task status\n  const toggleStatus = item => {\n    item.complete = !item.complete;\n    let newTaskList = tasks.map((task) => {\n      return task.taskID === item.taskID ? item : task;\n    });\n    setTasks(newTaskList);\n  };\n  //change task title\n  const changeTaskTitle = (event,item) => {\n     item.title = event.target.value;\n     let newTaskList = tasks.map((task) => {\n      return task.taskID === item.taskID ? item : task;\n    });\n    setTasks(newTaskList);\n  }\n  const moveUp = item => {\n    let itemIndex = tasks.indexOf(item);\n    if(itemIndex > 0) {\n      let newTaskList = swap([...tasks],itemIndex, itemIndex-1);\n      setTasks(newTaskList);\n    }\n  };\n  const moveDown = item => {\n    let itemIndex = tasks.indexOf(item);\n    if(itemIndex < tasks.length - 1) {\n      let newTaskList = swap([...tasks],itemIndex, itemIndex+1);\n      setTasks(newTaskList);\n    }\n  };\n  const moveTop = item => {\n    let itemIndex = tasks.indexOf(item);\n    if(itemIndex > 0) {\n      let newTaskList = swap([...tasks],itemIndex, 0);\n      setTasks(newTaskList);\n    }\n  }\n  const moveBottom = item => {\n    let itemIndex = tasks.indexOf(item);\n    if(itemIndex < tasks.length - 1) {\n      let newTaskList = swap([...tasks],itemIndex, tasks.length - 1);\n      setTasks(newTaskList);\n    }\n  }\n\n  return (\n    <section className=\"container mt-5\">\n      <div className=\"row justify-content-center\">\n        <div className=\"card shadow col-md-6\">\n          <div className=\"card-body\">\n            <h2 className=\"card-title text-uppercase\">To Do List</h2>\n            <SearchBar\n              searchValue = {searchTerm}\n              searchChange = {(e) => setNewSearch(e.target.value)}\n            />\n            <TodoList \n              list={searchedTask}\n              removeTask={removeTask} \n              changeStatus={toggleStatus}\n              changeTaskTitle ={changeTaskTitle}\n              moveUp={moveUp}\n              moveDown={moveDown}\n              moveTop = {moveTop}\n              moveBottom = {moveBottom}\n            />\n            <CreateTodo \n              submitNewTask={handleNewtaskSubmit}\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}